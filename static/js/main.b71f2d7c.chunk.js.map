{"version":3,"sources":["assets/beep-beep-bopbop-bop-bop.mp3","timer/Timer.js","timer/TimerActions.js","preset/Preset.js","preset/PresetActions.js","app/App.js","app/AppActions.js","serviceWorker.js","timer/TimerReducer.js","preset/PresetReducer.js","app/AppReducer.js","index.js"],"names":["module","exports","connect","state","timeLeft","timer","running","audioRef","dispatch","ownProps","toggle","getState","type","props","strokeLength","Math","PI","strokeOffset","startTime","formattedTimeLeft","seconds","minutesLeft","floor","secondsLeft","toString","padStart","formatTime","className","Helmet","label","width","height","viewBox","cx","displaySize","cy","r","fill","strokeWidth","strokeDasharray","strokeDashoffset","id","onClick","icon","faPause","faPlay","presets","index","value","increment","newValue","decrement","activeStyleArrow","cursor","style","active","borderBottom","faCaretLeft","faCaretRight","app","currentPreset","reset","setAudioRef","payload","actions","useEffect","faUndoAlt","ref","src","soundfile","Boolean","window","location","hostname","match","initialState","intervalID","timerReducer","action","presetReducer","map","preset","appReducer","newPreset","reducer","combineReducers","middleware","applyMiddleware","thunk","store","next","audioPromise","play","undefined","catch","error","console","log","pause","currentTime","setInterval","clearInterval","nextPreset","length","logger","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b71f2d7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep-beep-bopbop-bop-bop.b9db14af.mp3\";","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport \"./Timer.scss\";\r\nimport * as actions from \"./TimerActions\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay, faPause } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Timer(props) {\r\n  // let styles = props.running ? { color: \"white\" } : { color: \"lightgray\" };\r\n  const displaySize = 200;\r\n  const strokeWidth = 12;\r\n  const strokeLength = displaySize * Math.PI;\r\n  const percentLeft = props.timeLeft / props.startTime;\r\n  const strokeOffset = strokeLength * percentLeft;\r\n\r\n  const formatTime = seconds => {\r\n    let minutesLeft = Math.floor(seconds / 60);\r\n    let secondsLeft = seconds % 60;\r\n\r\n    secondsLeft = secondsLeft.toString().padStart(2, \"0\");\r\n    minutesLeft = minutesLeft.toString().padStart(2, \"0\");\r\n    return minutesLeft + \":\" + secondsLeft;\r\n  };\r\n\r\n  const formattedTimeLeft = formatTime(props.timeLeft);\r\n\r\n  return (\r\n    <div className=\"timer-container\">\r\n      {\" \"}\r\n      <Helmet>\r\n        <title>{props.running ? props.label + \": \" + formattedTimeLeft : \"Pomodoro Timer\"}</title>\r\n      </Helmet>\r\n      <svg\r\n        className=\"progress\"\r\n        width={displaySize}\r\n        height={displaySize}\r\n        viewBox={\"0 0 \" + displaySize + \" \" + displaySize}\r\n      >\r\n        <circle\r\n          className=\"progress-meter\"\r\n          cx={displaySize / 2}\r\n          cy={displaySize / 2}\r\n          r={(displaySize - strokeWidth) / 2}\r\n          fill=\"none\"\r\n          strokeWidth={strokeWidth - 2}\r\n        />\r\n        <circle\r\n          className=\"progress-value\"\r\n          cx={displaySize / 2}\r\n          cy={displaySize / 2}\r\n          r={(displaySize - strokeWidth) / 2}\r\n          fill=\"none\"\r\n          strokeWidth={strokeWidth}\r\n          strokeDasharray={strokeLength}\r\n          strokeDashoffset={strokeOffset.toString()}\r\n        />\r\n      </svg>\r\n      <div className=\"timer-display\">\r\n        <div id=\"timer-label\">{props.label}</div>\r\n        <div id=\"time-left\">{formattedTimeLeft}</div>\r\n        <div id=\"start_stop\" onClick={props.toggle}>\r\n          <FontAwesomeIcon icon={props.running ? faPause : faPlay} />\r\n        </div>\r\n      </div>\r\n      {/* <button id=\"start_stop\" onClick={props.toggle} className=\"\">\r\n        {props.running ? \"Pause\" : \"Play\"}\r\n      </button>\r\n      <button id=\"reset\" onClick={props.reset}>\r\n        Reset\r\n  </button> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    timeLeft: state.timer.timeLeft,\r\n    running: state.timer.running,\r\n    audioRef: state.timer.audioRef\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    // toggle: () => dispatch(actions.toggle(ownProps.finished))\r\n    toggle: () => dispatch(actions.toggle())\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Timer);\r\n","const MILLISECONDS = 1000;\r\n// const MILLISECONDS = 30;\r\n\r\n/*\r\nexport const tick = finished => {\r\n  return (dispatch, getState) => {\r\n    const { app, timer, presets } = getState();\r\n    if (timer.timeLeft <= 0) {\r\n      // let audioPromise = timer.audioRef.play();\r\n\r\n      // if (audioPromise !== undefined) {\r\n      //   audioPromise.catch(error => {\r\n      //     console.log(\"audio playback failed: \" + error);\r\n      //   });\r\n      // }\r\n\r\n      finished();\r\n\r\n      // let nextPreset = (app.currentPreset + 1) % presets.length;\r\n\r\n      // dispatch({\r\n      //   type: \"NEXT_PRESET\",\r\n      //   newPreset: nextPreset,\r\n      //   timeLeft: presets[nextPreset].value * 60,\r\n      //   label: presets[nextPreset].label\r\n      // });\r\n    } else {\r\n      dispatch({ type: \"TICK\" });\r\n    }\r\n  };\r\n};\r\n*/\r\n\r\nexport const toggle = () => {\r\n  return (dispatch, getState) => {\r\n    const { timer } = getState();\r\n    if (!timer.running) {\r\n      // let intervalID = setInterval(() => {\r\n      //   dispatch(tick(finished));\r\n      // }, MILLISECONDS);\r\n      dispatch({ type: \"START\" });\r\n      // dispatch({ type: \"SET_INTERVAL\", payload: intervalID });\r\n    } else {\r\n      // clearInterval(timer.intervalID);\r\n      dispatch({ type: \"STOP\" });\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport * as actions from \"./PresetActions\";\r\nimport \"./Preset.scss\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCaretLeft, faCaretRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Preset(props) {\r\n  // const paddedValue = props.value.toString().padStart(2, \"0\");\r\n\r\n  const activeStyleContainer = {\r\n    borderBottom: \"4px solid #29a4b5\"\r\n  };\r\n\r\n  const activeStyleArrow = {\r\n    cursor: \"default\"\r\n    // opacity: 0.25\r\n  };\r\n\r\n  return (\r\n    <div className=\"preset-container\" style={props.active ? activeStyleContainer : null}>\r\n      <div\r\n        className=\"arrow\"\r\n        onClick={props.active ? null : props.decrement}\r\n        id={props.id + \"-decrement\"}\r\n        style={props.active ? activeStyleArrow : null}\r\n      >\r\n        <FontAwesomeIcon icon={faCaretLeft} />\r\n      </div>\r\n      <div className=\"values\">\r\n        <div id={props.id + \"-length\"} className=\"preset-value\">\r\n          {props.value}\r\n        </div>\r\n        <div id={props.id + \"-label\"} className=\"preset-label\">\r\n          {props.label}\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"arrow\"\r\n        onClick={props.active ? null : props.increment}\r\n        id={props.id + \"-increment\"}\r\n        style={props.active ? activeStyleArrow : null}\r\n      >\r\n        <FontAwesomeIcon icon={faCaretRight} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    label: state.presets[ownProps.index].label,\r\n    value: state.presets[ownProps.index].value,\r\n    id: state.presets[ownProps.index].id\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    increment: () => dispatch(actions.increment(ownProps.index)),\r\n    decrement: () => dispatch(actions.decrement(ownProps.index))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Preset);\r\n","export const increment = id => {\n  return (dispatch, getState) => {\n    const { presets } = getState();\n    if (presets[id].value < 60) {\n      dispatch({\n        type: \"INCREMENT\",\n        id: id,\n        label: presets[id].label,\n        newValue: presets[id].value + 1\n      });\n    }\n  };\n};\n\nexport const decrement = id => {\n  return (dispatch, getState) => {\n    const { presets } = getState();\n    if (presets[id].value > 1) {\n      dispatch({\n        type: \"DECREMENT\",\n        id: id,\n        label: presets[id].label,\n        newValue: presets[id].value - 1\n      });\n    }\n  };\n};\n","import React, { useEffect } from \"react\";\nimport \"./App.scss\";\nimport Timer from \"../timer/Timer\";\nimport Preset from \"../preset/Preset\";\nimport { connect } from \"react-redux\";\nimport soundfile from \"../assets/beep-beep-bopbop-bop-bop.mp3\";\nimport * as actions from \"./AppActions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUndoAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction App(props) {\n  // const formattedTimeLeft = formatTime(props.timeLeft);\n\n  /* clear interval on unmount */\n  useEffect(() => {\n    return () => {\n      if (props.running) {\n        props.toggle();\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1>POMODORO TIMER</h1>\n      <div className=\"presets\">\n        <Preset\n          index={0}\n          // id=\"session\"\n          // increment={() => props.increment(0)}\n          // decrement={() => props.decrement(0)}\n          // label={props.presets[0].label}\n          // value={props.presets[0].value}\n          active={props.running && props.currentPreset === 0}\n        />\n        <Preset\n          index={1}\n          // id=\"break\"\n          // increment={() => props.increment(1)}\n          // decrement={() => props.decrement(1)}\n          // label={props.presets[1].label}\n          // value={props.presets[1].value}\n          active={props.running && props.currentPreset === 1}\n        />\n      </div>\n      <Timer\n        label={props.label}\n        // timeLeft={formattedTimeLeft}\n        // running={props.running}\n        // toggle={props.toggle}\n        startTime={props.startTime}\n        reset={props.reset}\n        // finished={props.nextPreset}\n      />\n      <div id=\"reset\" onClick={() => props.reset()}>\n        <FontAwesomeIcon icon={faUndoAlt} />\n      </div>\n      <audio ref={props.setAudioRef} src={soundfile} id=\"beep\" />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    label: state.presets[state.app.currentPreset].label,\n    startTime: state.presets[state.app.currentPreset].value * 60,\n    // timeLeft: state.timer.timeLeft,\n    running: state.timer.running,\n    presets: state.presets,\n    currentPreset: state.app.currentPreset\n    // audioRef: state.timer.audioRef\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // toggle: () => dispatch(actions.toggle()),\n    reset: () => dispatch(actions.reset()),\n    // increment: index => dispatch(actions.increment(index)),\n    // decrement: index => dispatch(actions.decrement(index)),\n    setAudioRef: audioRef => dispatch(actions.setAudioRef(audioRef))\n    // nextPreset: () => dispatch(actions.nextPreset())\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","export const reset = () => {\r\n  return (dispatch, getState) => {\r\n    // const { timer } = getState();\r\n    /* TODO: handling audioRef would ideally be controlled by Timer */\r\n    // timer.audioRef.pause();\r\n    // timer.audioRef.currentTime = 0;\r\n\r\n    // if (timer.running) {\r\n    //   clearInterval(timer.intervalID);\r\n    // }\r\n    dispatch({ type: \"RESET\" });\r\n  };\r\n};\r\n\r\nexport const setAudioRef = audioRef => {\r\n  return {\r\n    type: \"SET_AUDIO_REF\",\r\n    payload: audioRef\r\n  };\r\n};\r\n\r\n// export const nextPreset = () => {\r\n//   return (dispatch, getState) => {\r\n//     const { app, presets } = getState();\r\n//     const nextPreset = (app.currentPreset + 1) % presets.length;\r\n\r\n//     dispatch({\r\n//       type: \"NEXT_PRESET\",\r\n//       newPreset: nextPreset,\r\n//       timeLeft: presets[nextPreset].value * 60,\r\n//       label: presets[nextPreset].label\r\n//     });\r\n//   };\r\n// };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  label: \"Work\",\r\n  timeLeft: 25 * 60,\r\n  // timeLeft: 5,\r\n  running: false,\r\n  // currentPreset: 0,\r\n  // audioRef: null,\r\n  intervalID: null\r\n};\r\n\r\nconst timerReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // case \"SET_TIME\":\r\n    //   return { ...state, timeLeft: action.payload };\r\n    case \"TICK\":\r\n      return { ...state, timeLeft: state.timeLeft - 1 };\r\n    case \"START\":\r\n      return { ...state, running: true };\r\n    case \"STOP\":\r\n      return { ...state, running: false };\r\n    case \"INCREMENT\":\r\n      if (action.label === state.label && !state.running) {\r\n        return { ...state, timeLeft: action.newValue * 60 };\r\n      }\r\n      return state;\r\n    case \"DECREMENT\":\r\n      if (action.label === state.label && !state.running) {\r\n        return { ...state, timeLeft: action.newValue * 60 };\r\n      }\r\n      return state;\r\n    case \"RESET\":\r\n      // return {\r\n      //   ...state,\r\n      //   timeLeft: initialState.timeLeft,\r\n      //   running: false,\r\n      //   currentPreset: 0,\r\n      //   label: initialState.label\r\n      // };\r\n      return initialState;\r\n    case \"NEXT_PRESET\":\r\n      return {\r\n        ...state,\r\n        // newPreset: action.index,\r\n        timeLeft: action.timeLeft,\r\n        label: action.label\r\n      };\r\n    // case \"SET_AUDIO_REF\":\r\n    //   return {\r\n    //     ...state,\r\n    //     audioRef: action.payload\r\n    //   };\r\n    case \"SET_INTERVAL\":\r\n      return {\r\n        ...state,\r\n        intervalID: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default timerReducer;\r\n","const initialState = [\r\n  {\r\n    id: \"session\",\r\n    label: \"Work\",\r\n    value: 25\r\n  },\r\n  {\r\n    id: \"break\",\r\n    label: \"Break\",\r\n    value: 5\r\n  }\r\n];\r\n\r\nconst presetReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return state.map((preset, index) => {\r\n        if (index === action.id) {\r\n          return { ...preset, value: preset.value + 1 };\r\n        }\r\n        return preset;\r\n      });\r\n    case \"DECREMENT\":\r\n      return state.map((preset, index) => {\r\n        if (action.id === index) {\r\n          return { ...preset, value: preset.value - 1 };\r\n        }\r\n        return preset;\r\n      });\r\n    case \"RESET\":\r\n      return state.map((preset, index) => {\r\n        return { ...preset, value: initialState[index].value };\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/*\r\nconst initialState = {\r\n  label: \"Work\",\r\n  value: 25\r\n};\r\n\r\nconst presetReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return { ...state, value: state.value + 1 };\r\n    case \"DECREMENT\":\r\n      return { ...state, value: state.value - 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n*/\r\n\r\nexport default presetReducer;\r\n","const initialState = {\r\n  currentPreset: 0,\r\n  audioRef: null\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"NEXT_PRESET\":\r\n      return { ...state, currentPreset: action.newPreset };\r\n    case \"SET_AUDIO_REF\":\r\n      return {\r\n        ...state,\r\n        audioRef: action.payload\r\n      };\r\n    case \"RESET\":\r\n      return { ...state, currentPreset: initialState.currentPreset };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default appReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport timerReducer from \"./timer/TimerReducer\";\nimport presetReducer from \"./preset/PresetReducer\";\nimport appReducer from \"./app/AppReducer\";\nimport { logger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\n\nconst reducer = combineReducers({\n  timer: timerReducer,\n  presets: presetReducer,\n  app: appReducer\n});\n\nconst audioMiddleware = store => next => action => {\n  const { app } = store.getState();\n  switch (action.type) {\n    case \"NEXT_PRESET\":\n      let audioPromise = app.audioRef.play();\n      if (audioPromise !== undefined) {\n        audioPromise.catch(error => {\n          console.log(\"audio playback failed: \" + error);\n        });\n      }\n      break;\n    case \"RESET\":\n    case \"STOP\":\n      app.audioRef.pause();\n      app.audioRef.currentTime = 0;\n      break;\n  }\n  next(action);\n};\n\nconst timerMiddleware = store => next => action => {\n  const { timer } = store.getState();\n  switch (action.type) {\n    case \"START\":\n      let intervalID = setInterval(() => {\n        store.dispatch({ type: \"TICK\" });\n      }, 1000);\n      store.dispatch({ type: \"SET_INTERVAL\", payload: intervalID });\n      next(action);\n      break;\n    case \"RESET\":\n    case \"STOP\":\n      clearInterval(timer.intervalID);\n      next(action);\n      break;\n    case \"TICK\":\n      if (timer.timeLeft <= 0) {\n        const { app, presets } = store.getState();\n        const nextPreset = (app.currentPreset + 1) % presets.length;\n        store.dispatch({\n          type: \"NEXT_PRESET\",\n          newPreset: nextPreset,\n          timeLeft: presets[nextPreset].value * 60,\n          label: presets[nextPreset].label\n        });\n      } else {\n        next(action);\n      }\n      break;\n    default:\n      next(action);\n      break;\n  }\n};\n\nconst middleware = applyMiddleware(thunk, audioMiddleware, timerMiddleware, logger);\nconst store = createStore(reducer, middleware);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}