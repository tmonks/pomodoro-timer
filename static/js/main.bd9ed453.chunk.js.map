{"version":3,"sources":["assets/beep-beep-bopbop-bop-bop.mp3","timer/Timer.js","preset/Preset.js","app/App.js","serviceWorker.js","timer/TimerReducer.js","preset/PresetReducer.js","app/AppReducer.js","index.js","middleware.js"],"names":["module","exports","connect","state","timeLeft","timer","running","audioRef","intervalID","dispatch","ownProps","start","type","stop","props","circumference","Math","PI","strokeOffset","startTime","isRunning","useEffect","clearInterval","formattedTimeLeft","seconds","minutesLeft","floor","secondsLeft","toString","padStart","formatTime","className","Helmet","label","width","height","viewBox","cx","displaySize","cy","r","fill","strokeWidth","strokeDasharray","strokeDashoffset","id","onClick","icon","faPause","faPlay","presets","index","value","increment","decrement","activeStyleArrow","cursor","style","active","borderBottomColor","faCaretLeft","faCaretRight","app","activePreset","reset","setAudioRef","payload","faUndoAlt","ref","src","soundfile","Boolean","window","location","hostname","match","initialState","timerReducer","action","isActivePreset","newValue","presetReducer","map","preset","appReducer","newPreset","reducer","combineReducers","middleware","applyMiddleware","store","next","getState","audioPromise","play","undefined","catch","error","console","log","pause","currentTime","activePresetValue","setInterval","nextPreset","length","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd9ed453.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep-beep-bopbop-bop-bop.b9db14af.mp3\";","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport \"./Timer.scss\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay, faPause } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Timer(props) {\r\n  const displaySize = 200;\r\n  const strokeWidth = 12;\r\n  const circumference = displaySize * Math.PI;\r\n  const percentLeft = props.timeLeft / props.startTime;\r\n\r\n  /* strokeOffset needs to start from the circumference (completely hidden)\r\n     and progress to 0 (completely shown) */\r\n  const strokeOffset = circumference * percentLeft;\r\n\r\n  const intervalID = props.intervalID;\r\n  const isRunning = props.running;\r\n\r\n  /* clear interval on unmount */\r\n  useEffect(() => {\r\n    return () => {\r\n      if (isRunning) {\r\n        clearInterval(intervalID);\r\n      }\r\n    };\r\n  }, [isRunning, intervalID]);\r\n\r\n  /* convert time in seconts to MM:SS */\r\n  const formatTime = seconds => {\r\n    let minutesLeft = Math.floor(seconds / 60);\r\n    let secondsLeft = seconds % 60;\r\n\r\n    secondsLeft = secondsLeft.toString().padStart(2, \"0\");\r\n    minutesLeft = minutesLeft.toString().padStart(2, \"0\");\r\n    return minutesLeft + \":\" + secondsLeft;\r\n  };\r\n\r\n  const formattedTimeLeft = formatTime(props.timeLeft);\r\n\r\n  return (\r\n    <div className=\"timer-container\">\r\n      {\" \"}\r\n      <Helmet>\r\n        <title>\r\n          {props.running ? formattedTimeLeft + \" (\" + props.label + \")\" : \"Pomodoro Timer\"}\r\n        </title>\r\n      </Helmet>\r\n      <svg\r\n        className=\"progress\"\r\n        width={displaySize}\r\n        height={displaySize}\r\n        viewBox={\"0 0 \" + displaySize + \" \" + displaySize}\r\n      >\r\n        {/* Empty radial progress meter */}\r\n        <circle\r\n          className=\"progress-meter\"\r\n          cx={displaySize / 2}\r\n          cy={displaySize / 2}\r\n          r={(displaySize - strokeWidth) / 2}\r\n          fill=\"none\"\r\n          strokeWidth={strokeWidth - 2}\r\n        />\r\n        {/* Radial progress meter value */}\r\n        <circle\r\n          className=\"progress-value\"\r\n          cx={displaySize / 2}\r\n          cy={displaySize / 2}\r\n          r={(displaySize - strokeWidth) / 2}\r\n          fill=\"none\"\r\n          strokeWidth={strokeWidth}\r\n          /* strokeDasharray sets the length of the dashes in the stroke. When it's set to the\r\n             circumference, it will fill up the entire circle */\r\n          strokeDasharray={circumference}\r\n          strokeDashoffset={strokeOffset.toString()}\r\n        />\r\n      </svg>\r\n      <div\r\n        className=\"timer-display\"\r\n        id=\"start_stop\"\r\n        onClick={props.running ? props.stop : props.start}\r\n      >\r\n        <div id=\"timer-label\">{props.label}</div>\r\n        <div id=\"time-left\">{formattedTimeLeft}</div>\r\n        <div id=\"start_stop_icon\">\r\n          <FontAwesomeIcon icon={props.running ? faPause : faPlay} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    timeLeft: state.timer.timeLeft,\r\n    running: state.timer.running,\r\n    audioRef: state.timer.audioRef,\r\n    intervalID: state.timer.intervalID\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    start: () => dispatch({ type: \"START\" }),\r\n    stop: () => dispatch({ type: \"STOP\" })\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Timer);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./Preset.scss\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCaretLeft, faCaretRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Preset(props) {\r\n  const activeStyleContainer = {\r\n    borderBottomColor: \"#29a4b5\"\r\n  };\r\n\r\n  const activeStyleArrow = {\r\n    cursor: \"default\"\r\n  };\r\n\r\n  return (\r\n    <div className=\"preset-container\" style={props.active ? activeStyleContainer : null}>\r\n      {/* left arrow button */}\r\n      <div\r\n        className=\"arrow\"\r\n        onClick={props.active ? null : props.decrement}\r\n        id={props.id + \"-decrement\"}\r\n        style={props.active ? activeStyleArrow : null}\r\n      >\r\n        <FontAwesomeIcon icon={faCaretLeft} />\r\n      </div>\r\n\r\n      {/* Preset value & label */}\r\n      <div className=\"values\">\r\n        <div id={props.id + \"-length\"} className=\"preset-value\">\r\n          {props.value}\r\n        </div>\r\n        <div id={props.id + \"-label\"} className=\"preset-label\">\r\n          {props.label}\r\n        </div>\r\n      </div>\r\n\r\n      {/* right arrow button */}\r\n      <div\r\n        className=\"arrow\"\r\n        onClick={props.active ? null : props.increment}\r\n        id={props.id + \"-increment\"}\r\n        style={props.active ? activeStyleArrow : null}\r\n      >\r\n        <FontAwesomeIcon icon={faCaretRight} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst increment = id => {\r\n  return { type: \"INCREMENT\", id };\r\n};\r\n\r\nconst decrement = id => {\r\n  return { type: \"DECREMENT\", id };\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    label: state.presets[ownProps.index].label,\r\n    value: state.presets[ownProps.index].value,\r\n    id: state.presets[ownProps.index].id\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    increment: () => dispatch(increment(ownProps.index)),\r\n    decrement: () => dispatch(decrement(ownProps.index))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Preset);\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Timer from \"../timer/Timer\";\nimport Preset from \"../preset/Preset\";\n\nimport \"./App.scss\";\nimport soundfile from \"../assets/beep-beep-bopbop-bop-bop.mp3\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUndoAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction App(props) {\n  return (\n    <div className=\"app\">\n      <h1>POMODORO TIMER</h1>\n      <div className=\"presets-container\">\n        <Preset index={0} active={props.running && props.activePreset === 0} />\n        <Preset index={1} active={props.running && props.activePreset === 1} />\n      </div>\n      <Timer label={props.label} startTime={props.startTime} reset={props.reset} />\n      <div id=\"reset\" onClick={() => props.reset()}>\n        <FontAwesomeIcon icon={faUndoAlt} />\n      </div>\n      <audio ref={props.setAudioRef} src={soundfile} id=\"beep\" />\n    </div>\n  );\n}\n\nconst reset = () => {\n  return { type: \"RESET\" };\n};\n\n/* save a ref to an audio element in order to control playback */\nconst setAudioRef = audioRef => {\n  return {\n    type: \"SET_AUDIO_REF\",\n    payload: audioRef\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    label: state.presets[state.app.activePreset].label,\n    startTime: state.presets[state.app.activePreset].value * 60,\n    running: state.timer.running,\n    activePreset: state.app.activePreset\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    reset: () => dispatch(reset()),\n    setAudioRef: audioRef => dispatch(setAudioRef(audioRef))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  label: \"Work\",\r\n  timeLeft: 25 * 60,\r\n  running: false,\r\n  intervalID: null\r\n};\r\n\r\nconst timerReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"TICK\":\r\n      return { ...state, timeLeft: state.timeLeft - 1 };\r\n    case \"START\":\r\n      return { ...state, running: true };\r\n    case \"STOP\":\r\n      return { ...state, running: false };\r\n    case \"INCREMENT\":\r\n      /* increment if the timer isn't running and the active preset is being updated */\r\n      if (action.isActivePreset && !state.running) {\r\n        return { ...state, timeLeft: action.newValue * 60 };\r\n      }\r\n      return state;\r\n    case \"DECREMENT\":\r\n      /* decrement if the timer isn't running and the active preset is being updated */\r\n      if (action.isActivePreset && !state.running) {\r\n        return { ...state, timeLeft: action.newValue * 60 };\r\n      }\r\n      return state;\r\n    case \"RESET\":\r\n      return initialState;\r\n    case \"NEXT_PRESET\":\r\n      /* update the timeLeft and label to the next preset */\r\n      return {\r\n        ...state,\r\n        timeLeft: action.timeLeft,\r\n        label: action.label\r\n      };\r\n    case \"SET_INTERVAL\":\r\n      return {\r\n        ...state,\r\n        intervalID: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default timerReducer;\r\n","const initialState = [\r\n  {\r\n    id: \"session\",\r\n    label: \"Work\",\r\n    value: 25\r\n  },\r\n  {\r\n    id: \"break\",\r\n    label: \"Break\",\r\n    value: 5\r\n  }\r\n];\r\n\r\nconst presetReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      /* increment the value for the preset matching id, if < the max of 60 */\r\n      return state.map((preset, index) => {\r\n        if (index === action.id && preset.value < 60) {\r\n          return { ...preset, value: preset.value + 1 };\r\n        }\r\n        return preset;\r\n      });\r\n    case \"DECREMENT\":\r\n      /* increment the value for the preset matching id, if > the max of 1 */\r\n      return state.map((preset, index) => {\r\n        if (action.id === index && preset.value > 1) {\r\n          return { ...preset, value: preset.value - 1 };\r\n        }\r\n        return preset;\r\n      });\r\n    case \"RESET\":\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default presetReducer;\r\n","const initialState = {\r\n  activePreset: 0,\r\n  audioRef: null\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"NEXT_PRESET\":\r\n      return { ...state, activePreset: action.newPreset };\r\n    case \"SET_AUDIO_REF\":\r\n      return {\r\n        ...state,\r\n        audioRef: action.payload\r\n      };\r\n    case \"RESET\":\r\n      /* reset activePreset, but NOT audioRef */\r\n      return { ...state, activePreset: initialState.activePreset };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default appReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport timerReducer from \"./timer/TimerReducer\";\nimport presetReducer from \"./preset/PresetReducer\";\nimport appReducer from \"./app/AppReducer\";\n\n// import { logger } from \"redux-logger\";\n\nimport { audioMiddleware, timerMiddleware } from \"./middleware\";\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\n\nconst reducer = combineReducers({\n  timer: timerReducer,\n  presets: presetReducer,\n  app: appReducer\n});\n\nconst middleware = applyMiddleware(audioMiddleware, timerMiddleware);\nconst store = createStore(reducer, middleware);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","// handles starting and stopping the alarm sound\r\nexport const audioMiddleware = store => next => action => {\r\n  const { app } = store.getState();\r\n  switch (action.type) {\r\n    case \"NEXT_PRESET\":\r\n      // play alarm sound when switching to the next preset\r\n      let audioPromise = app.audioRef.play();\r\n      if (audioPromise !== undefined) {\r\n        audioPromise.catch(error => {\r\n          console.log(\"audio playback failed: \" + error);\r\n        });\r\n      }\r\n      break;\r\n    case \"RESET\":\r\n    case \"STOP\":\r\n      // stop and rewind when timer is stopped or reset\r\n      app.audioRef.pause();\r\n      app.audioRef.currentTime = 0;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  next(action);\r\n};\r\n\r\n// handles the interval and interaction between Timer, Preset, and App components\r\nexport const timerMiddleware = store => next => action => {\r\n  const { app, timer, presets } = store.getState();\r\n  let activePresetValue = null;\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      // add data from app and preset state to the action to tell the timer if/how to update\r\n      action.isActivePreset = app.activePreset === action.id;\r\n      activePresetValue = presets[action.id].value;\r\n      action.newValue = activePresetValue < 60 ? activePresetValue + 1 : activePresetValue;\r\n      next(action);\r\n      break;\r\n    case \"DECREMENT\":\r\n      // add data from app and preset state to the action to tell the timer if/how to update\r\n      action.isActivePreset = app.activePreset === action.id;\r\n      activePresetValue = presets[action.id].value;\r\n      action.newValue = activePresetValue > 1 ? activePresetValue - 1 : activePresetValue;\r\n      next(action);\r\n      break;\r\n    case \"START\":\r\n      // start the interval to count down the time left\r\n      let intervalID = setInterval(() => {\r\n        store.dispatch({ type: \"TICK\" });\r\n      }, 1000);\r\n      store.dispatch({ type: \"SET_INTERVAL\", payload: intervalID });\r\n      next(action);\r\n      break;\r\n    case \"RESET\":\r\n    case \"STOP\":\r\n      clearInterval(timer.intervalID);\r\n      next(action);\r\n      break;\r\n    case \"TICK\":\r\n      if (timer.timeLeft <= 0) {\r\n        // when timer reaches 0, identify and switch to the next preset\r\n        const { app, presets } = store.getState();\r\n        const nextPreset = (app.activePreset + 1) % presets.length;\r\n        store.dispatch({\r\n          type: \"NEXT_PRESET\",\r\n          newPreset: nextPreset,\r\n          timeLeft: presets[nextPreset].value * 60,\r\n          label: presets[nextPreset].label\r\n        });\r\n      } else {\r\n        next(action);\r\n      }\r\n      break;\r\n    default:\r\n      next(action);\r\n      break;\r\n  }\r\n};\r\n"],"sourceRoot":""}